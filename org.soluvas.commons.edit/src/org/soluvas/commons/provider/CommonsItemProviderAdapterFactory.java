/**
 */
package org.soluvas.commons.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.soluvas.commons.util.CommonsAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class CommonsItemProviderAdapterFactory extends CommonsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CommonsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.soluvas.commons.AppManifest} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AppManifestItemProvider appManifestItemProvider;

	/**
	 * This creates an adapter for a {@link org.soluvas.commons.AppManifest}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAppManifestAdapter() {
		if (appManifestItemProvider == null) {
			appManifestItemProvider = new AppManifestItemProvider(this);
		}

		return appManifestItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.soluvas.commons.PersonInfo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PersonInfoItemProvider personInfoItemProvider;

	/**
	 * This creates an adapter for a {@link org.soluvas.commons.PersonInfo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPersonInfoAdapter() {
		if (personInfoItemProvider == null) {
			personInfoItemProvider = new PersonInfoItemProvider(this);
		}

		return personInfoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.soluvas.commons.WebAddress} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WebAddressItemProvider webAddressItemProvider;

	/**
	 * This creates an adapter for a {@link org.soluvas.commons.WebAddress}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWebAddressAdapter() {
		if (webAddressItemProvider == null) {
			webAddressItemProvider = new WebAddressItemProvider(this);
		}

		return webAddressItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.soluvas.commons.Added} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AddedItemProvider addedItemProvider;

	/**
	 * This creates an adapter for a {@link org.soluvas.commons.Added}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAddedAdapter() {
		if (addedItemProvider == null) {
			addedItemProvider = new AddedItemProvider(this);
		}

		return addedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.soluvas.commons.AttributeSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeSetItemProvider attributeSetItemProvider;

	/**
	 * This creates an adapter for a {@link org.soluvas.commons.AttributeSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeSetAdapter() {
		if (attributeSetItemProvider == null) {
			attributeSetItemProvider = new AttributeSetItemProvider(this);
		}

		return attributeSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.soluvas.commons.AttributeUnset} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeUnsetItemProvider attributeUnsetItemProvider;

	/**
	 * This creates an adapter for a {@link org.soluvas.commons.AttributeUnset}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeUnsetAdapter() {
		if (attributeUnsetItemProvider == null) {
			attributeUnsetItemProvider = new AttributeUnsetItemProvider(this);
		}

		return attributeUnsetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.soluvas.commons.Removed} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RemovedItemProvider removedItemProvider;

	/**
	 * This creates an adapter for a {@link org.soluvas.commons.Removed}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRemovedAdapter() {
		if (removedItemProvider == null) {
			removedItemProvider = new RemovedItemProvider(this);
		}

		return removedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.soluvas.commons.AttributeNotification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeNotificationItemProvider attributeNotificationItemProvider;

	/**
	 * This creates an adapter for a {@link org.soluvas.commons.AttributeNotification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeNotificationAdapter() {
		if (attributeNotificationItemProvider == null) {
			attributeNotificationItemProvider = new AttributeNotificationItemProvider(this);
		}

		return attributeNotificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.soluvas.commons.AddedMany} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AddedManyItemProvider addedManyItemProvider;

	/**
	 * This creates an adapter for a {@link org.soluvas.commons.AddedMany}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAddedManyAdapter() {
		if (addedManyItemProvider == null) {
			addedManyItemProvider = new AddedManyItemProvider(this);
		}

		return addedManyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.soluvas.commons.RemovedMany} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RemovedManyItemProvider removedManyItemProvider;

	/**
	 * This creates an adapter for a {@link org.soluvas.commons.RemovedMany}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRemovedManyAdapter() {
		if (removedManyItemProvider == null) {
			removedManyItemProvider = new RemovedManyItemProvider(this);
		}

		return removedManyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.soluvas.commons.CategoryInfo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CategoryInfoItemProvider categoryInfoItemProvider;

	/**
	 * This creates an adapter for a {@link org.soluvas.commons.CategoryInfo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCategoryInfoAdapter() {
		if (categoryInfoItemProvider == null) {
			categoryInfoItemProvider = new CategoryInfoItemProvider(this);
		}

		return categoryInfoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.soluvas.commons.ShellProgressMonitor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ShellProgressMonitorItemProvider shellProgressMonitorItemProvider;

	/**
	 * This creates an adapter for a {@link org.soluvas.commons.ShellProgressMonitor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createShellProgressMonitorAdapter() {
		if (shellProgressMonitorItemProvider == null) {
			shellProgressMonitorItemProvider = new ShellProgressMonitorItemProvider(this);
		}

		return shellProgressMonitorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.soluvas.commons.EventBusProgressMonitor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventBusProgressMonitorItemProvider eventBusProgressMonitorItemProvider;

	/**
	 * This creates an adapter for a {@link org.soluvas.commons.EventBusProgressMonitor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventBusProgressMonitorAdapter() {
		if (eventBusProgressMonitorItemProvider == null) {
			eventBusProgressMonitorItemProvider = new EventBusProgressMonitorItemProvider(this);
		}

		return eventBusProgressMonitorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.soluvas.commons.ProgressMonitorWrapper} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProgressMonitorWrapperItemProvider progressMonitorWrapperItemProvider;

	/**
	 * This creates an adapter for a {@link org.soluvas.commons.ProgressMonitorWrapper}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProgressMonitorWrapperAdapter() {
		if (progressMonitorWrapperItemProvider == null) {
			progressMonitorWrapperItemProvider = new ProgressMonitorWrapperItemProvider(this);
		}

		return progressMonitorWrapperItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.soluvas.commons.Translation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TranslationItemProvider translationItemProvider;

	/**
	 * This creates an adapter for a {@link org.soluvas.commons.Translation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTranslationAdapter() {
		if (translationItemProvider == null) {
			translationItemProvider = new TranslationItemProvider(this);
		}

		return translationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link java.util.Map.Entry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TranslationMessageEntryItemProvider translationMessageEntryItemProvider;

	/**
	 * This creates an adapter for a {@link java.util.Map.Entry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTranslationMessageEntryAdapter() {
		if (translationMessageEntryItemProvider == null) {
			translationMessageEntryItemProvider = new TranslationMessageEntryItemProvider(this);
		}

		return translationMessageEntryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.soluvas.commons.TranslationManager} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TranslationManagerItemProvider translationManagerItemProvider;

	/**
	 * This creates an adapter for a {@link org.soluvas.commons.TranslationManager}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTranslationManagerAdapter() {
		if (translationManagerItemProvider == null) {
			translationManagerItemProvider = new TranslationManagerItemProvider(this);
		}

		return translationManagerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link java.util.Map.Entry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TranslationEntryItemProvider translationEntryItemProvider;

	/**
	 * This creates an adapter for a {@link java.util.Map.Entry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTranslationEntryAdapter() {
		if (translationEntryItemProvider == null) {
			translationEntryItemProvider = new TranslationEntryItemProvider(this);
		}

		return translationEntryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.soluvas.commons.Person} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PersonItemProvider personItemProvider;

	/**
	 * This creates an adapter for a {@link org.soluvas.commons.Person}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPersonAdapter() {
		if (personItemProvider == null) {
			personItemProvider = new PersonItemProvider(this);
		}

		return personItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.soluvas.commons.PhoneNumber} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PhoneNumberItemProvider phoneNumberItemProvider;

	/**
	 * This creates an adapter for a {@link org.soluvas.commons.PhoneNumber}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPhoneNumberAdapter() {
		if (phoneNumberItemProvider == null) {
			phoneNumberItemProvider = new PhoneNumberItemProvider(this);
		}

		return phoneNumberItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.soluvas.commons.Email} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EmailItemProvider emailItemProvider;

	/**
	 * This creates an adapter for a {@link org.soluvas.commons.Email}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEmailAdapter() {
		if (emailItemProvider == null) {
			emailItemProvider = new EmailItemProvider(this);
		}

		return emailItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.soluvas.commons.PostalAddress} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PostalAddressItemProvider postalAddressItemProvider;

	/**
	 * This creates an adapter for a {@link org.soluvas.commons.PostalAddress}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPostalAddressAdapter() {
		if (postalAddressItemProvider == null) {
			postalAddressItemProvider = new PostalAddressItemProvider(this);
		}

		return postalAddressItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.soluvas.commons.PersonCatalog} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PersonCatalogItemProvider personCatalogItemProvider;

	/**
	 * This creates an adapter for a {@link org.soluvas.commons.PersonCatalog}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPersonCatalogAdapter() {
		if (personCatalogItemProvider == null) {
			personCatalogItemProvider = new PersonCatalogItemProvider(this);
		}

		return personCatalogItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.soluvas.commons.FacebookIdentity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FacebookIdentityItemProvider facebookIdentityItemProvider;

	/**
	 * This creates an adapter for a {@link org.soluvas.commons.FacebookIdentity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFacebookIdentityAdapter() {
		if (facebookIdentityItemProvider == null) {
			facebookIdentityItemProvider = new FacebookIdentityItemProvider(this);
		}

		return facebookIdentityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.soluvas.commons.FacebookAccessible} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FacebookAccessibleItemProvider facebookAccessibleItemProvider;

	/**
	 * This creates an adapter for a {@link org.soluvas.commons.FacebookAccessible}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFacebookAccessibleAdapter() {
		if (facebookAccessibleItemProvider == null) {
			facebookAccessibleItemProvider = new FacebookAccessibleItemProvider(this);
		}

		return facebookAccessibleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.soluvas.commons.Geolocation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GeolocationItemProvider geolocationItemProvider;

	/**
	 * This creates an adapter for a {@link org.soluvas.commons.Geolocation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGeolocationAdapter() {
		if (geolocationItemProvider == null) {
			geolocationItemProvider = new GeolocationItemProvider(this);
		}

		return geolocationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.soluvas.commons.ThingInfo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ThingInfoItemProvider thingInfoItemProvider;

	/**
	 * This creates an adapter for a {@link org.soluvas.commons.ThingInfo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createThingInfoAdapter() {
		if (thingInfoItemProvider == null) {
			thingInfoItemProvider = new ThingInfoItemProvider(this);
		}

		return thingInfoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.soluvas.commons.Organization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrganizationItemProvider organizationItemProvider;

	/**
	 * This creates an adapter for a {@link org.soluvas.commons.Organization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrganizationAdapter() {
		if (organizationItemProvider == null) {
			organizationItemProvider = new OrganizationItemProvider(this);
		}

		return organizationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.soluvas.commons.CustomerRole} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CustomerRoleItemProvider customerRoleItemProvider;

	/**
	 * This creates an adapter for a {@link org.soluvas.commons.CustomerRole}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCustomerRoleAdapter() {
		if (customerRoleItemProvider == null) {
			customerRoleItemProvider = new CustomerRoleItemProvider(this);
		}

		return customerRoleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.soluvas.commons.CustomerRoleCatalog} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CustomerRoleCatalogItemProvider customerRoleCatalogItemProvider;

	/**
	 * This creates an adapter for a {@link org.soluvas.commons.CustomerRoleCatalog}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCustomerRoleCatalogAdapter() {
		if (customerRoleCatalogItemProvider == null) {
			customerRoleCatalogItemProvider = new CustomerRoleCatalogItemProvider(this);
		}

		return customerRoleCatalogItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (appManifestItemProvider != null) appManifestItemProvider.dispose();
		if (personInfoItemProvider != null) personInfoItemProvider.dispose();
		if (webAddressItemProvider != null) webAddressItemProvider.dispose();
		if (addedItemProvider != null) addedItemProvider.dispose();
		if (attributeSetItemProvider != null) attributeSetItemProvider.dispose();
		if (attributeUnsetItemProvider != null) attributeUnsetItemProvider.dispose();
		if (removedItemProvider != null) removedItemProvider.dispose();
		if (attributeNotificationItemProvider != null) attributeNotificationItemProvider.dispose();
		if (addedManyItemProvider != null) addedManyItemProvider.dispose();
		if (removedManyItemProvider != null) removedManyItemProvider.dispose();
		if (categoryInfoItemProvider != null) categoryInfoItemProvider.dispose();
		if (shellProgressMonitorItemProvider != null) shellProgressMonitorItemProvider.dispose();
		if (eventBusProgressMonitorItemProvider != null) eventBusProgressMonitorItemProvider.dispose();
		if (progressMonitorWrapperItemProvider != null) progressMonitorWrapperItemProvider.dispose();
		if (translationItemProvider != null) translationItemProvider.dispose();
		if (translationMessageEntryItemProvider != null) translationMessageEntryItemProvider.dispose();
		if (translationManagerItemProvider != null) translationManagerItemProvider.dispose();
		if (translationEntryItemProvider != null) translationEntryItemProvider.dispose();
		if (personItemProvider != null) personItemProvider.dispose();
		if (phoneNumberItemProvider != null) phoneNumberItemProvider.dispose();
		if (emailItemProvider != null) emailItemProvider.dispose();
		if (postalAddressItemProvider != null) postalAddressItemProvider.dispose();
		if (personCatalogItemProvider != null) personCatalogItemProvider.dispose();
		if (facebookIdentityItemProvider != null) facebookIdentityItemProvider.dispose();
		if (facebookAccessibleItemProvider != null) facebookAccessibleItemProvider.dispose();
		if (geolocationItemProvider != null) geolocationItemProvider.dispose();
		if (thingInfoItemProvider != null) thingInfoItemProvider.dispose();
		if (organizationItemProvider != null) organizationItemProvider.dispose();
		if (customerRoleItemProvider != null) customerRoleItemProvider.dispose();
		if (customerRoleCatalogItemProvider != null) customerRoleCatalogItemProvider.dispose();
	}

}
