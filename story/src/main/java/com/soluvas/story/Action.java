package com.soluvas.story;

import org.soluvas.commons.NameContainer;
import org.soluvas.commons.NsPrefixable;

import com.soluvas.story.schema.ActionLike;
import com.soluvas.story.schema.ActionType;

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Action</b></em>'.
 * <!-- end-user-doc -->
 *
 * <!-- begin-model-doc -->
 * Actions
 * 
 * Actions are the high-level "interactions" users can perform in your app.
 * Types
 * Built-in
 * 
 * Facebook has defined a set of actions that can be used without any further customization on your part.
 * 
 *     Follow
 *     Like
 *     Listen
 *     Read
 *     Watch
 * 
 * Custom Actions
 * 
 * You have the ability to create your own actions and define all properties of those actions. This gives you the ultimate flexibility when modeling Open Graph actions that seamlessly replicate what your user's are doing on your site.
 * Privacy Model
 * 
 * User Choice
 * 
 * Actions follow the privacy model of the user. User's can decide to share the actions they've taken on your app with "Everyone", "Friends", or keep them private to themselves. When configuring your action, as the developer, you have the ability to set a default privacy level, however, the user can choose to override that default privacy level with any privacy level that's more restricted. The user can NOT choose a privacy level that's more open, which might be important if you are building an app where you need to ensure a minimum level of privacy.
 * Examples
 * 
 * You may have seen Open Graph actions on your Timeline. Here are examples of the Open Graph actions ("pin") generated by Pinterest. The first example is how a Pinterest action is displayed in another person's News Feed:
 * 
 * The second example is how a Pinterest action is aggregated in a person's Timeline:
 * 
 * Reference: https://developers.facebook.com/docs/concepts/opengraph/actions/
 * <!-- end-model-doc -->
 *
 * <p>
 * The following features are supported:
 * <ul>
 *   <li>{@link com.soluvas.story.Action#getActionType <em>Action Type</em>}</li>
 * </ul>
 * </p>
 *
 * @see com.soluvas.story.StoryPackage#getAction()
 * @model abstract="true"
 * @generated
 */
public interface Action extends NameContainer, ActionLike, NsPrefixable {

	/**
	 * Returns the value of the '<em><b>Action Type</b></em>' reference.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Action Type</em>' reference isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Action Type</em>' reference.
	 * @see #setActionType(ActionType)
	 * @see com.soluvas.story.StoryPackage#getAction_ActionType()
	 * @model
	 * @generated
	 */
	ActionType getActionType();

	/**
	 * Sets the value of the '{@link com.soluvas.story.Action#getActionType <em>Action Type</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Action Type</em>' reference.
	 * @see #getActionType()
	 * @generated
	 */
	void setActionType(ActionType value);
} // Action
