h1. Soluvas Framework: Image Store

h2. Usage

Configure @ImageStore@ via CDI *@Produces* and *@Disposes*:

bc.. @Produces @PersonRelated @ApplicationScoped public ImageStore createPersonImageStore(@New ImageStore imageStore) {
	imageStore.addStyle("thumbnail", "t", 50, 50);
	imageStore.addStyle("small", "s", 128, 128);
	imageStore.addStyle("normal", "n", 240, 320);
	imageStore.setDavUri(getProperty("image.dav.uri"));
	imageStore.setPublicUri(getProperty("image.public.uri"));
	imageStore.setMongoUri(getProperty("image.mongo.uri"));
	imageStore.setNamespace("person");
	imageStore.init(getProperty("image.dav.password"));
	return imageStore;
}

public void destroyPersonImageStore(@Disposes @PersonRelated ImageStore imageStore) {
	imageStore.destroy();
}

p. You can also use Solder Config to configure the bean.

p. Use the configured @ImageStore@ :

bc. @Inject @PersonRelated ImageStore personImageStore;

h3. Using your own Akka ActorSystem

Call @setSystem(ActorSystem)@, e.g. :

bc.. @Inject ActorSystem system;

@Produces @ArticleRelated @ApplicationScoped public ImageStore createArticleImageStore(@New ImageStore imageStore) {
	imageStore.setSystem(system);
	imageStore.addStyle("thumbnail", "t", 50, 50);
	imageStore.addStyle("small", "s", 125, 125);
	imageStore.addStyle("normal", "n", 320, 240);
	imageStore.setDavUri(getProperty("image.dav.uri"));
	imageStore.setPublicUri(getProperty("image.public.uri"));
	imageStore.setMongoUri(getProperty("image.mongo.uri"));
	imageStore.setNamespace("article");
	imageStore.init(getProperty("image.dav.password"));
	return imageStore;
}

p. You are responsible for shutting down the @ActorSystem@.

h2. JavaScript Library

What you need:

* RequireJS
* org.soluvas.image/imageConfigs
* org.soluvas.image/Images
* "uritemplate.js":https://github.com/fxa/uritemplate-js 

A proper @imageConfigs@ must contain something like:

bc.. define([], function() {

var imageConfigs = {
	'person': {publicUriTemplate: 'http://dav.berbatik.annafi.dev/person/styleCode/imageId_styleCode_variantCode.ext'},
};

return apiConfig;
});

p. To get a URI from an image ID:

bc. define(['org.soluvas.image/Images'], function(Images) {
Images.getPublicUri(namespace, imageId); // DO NOT USE!
Images.getPublicUri(namespace, imageId, styleCode); // RECOMMENDED
Images.getPublicUri(namespace, imageId, styleCode, variantCode);
Images.getPublicUri(namespace, imageId, styleCode, variantCode, ext);
});

ext is assumed to be 'jpg' in all other classes.

Note to get width, height, available styles and variants, etc. you need to provide it from the server, not pure client.
