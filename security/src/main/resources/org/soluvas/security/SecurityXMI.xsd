<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<xsd:schema xmlns:commons="http://www.soluvas.org/schema/commons/1.0" xmlns:security="http://www.soluvas.org/schema/security/1.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsd="http://www.w3.org/2001/XMLSchema" targetNamespace="http://www.soluvas.org/schema/security/1.0">
  <xsd:import namespace="http://www.omg.org/XMI" schemaLocation="platform:/plugin/org.eclipse.emf.ecore/model/XMI.xsd"/>
  <xsd:import namespace="http://www.soluvas.org/schema/commons/1.0" schemaLocation="commons.xsd"/>
  <xsd:simpleType name="AssignMode">
    <xsd:annotation>
      <xsd:documentation>Specify how a role should be assigned to a subject.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="manual">
        <xsd:annotation>
          <xsd:documentation>Do not automatically assign this role.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="guest">
        <xsd:annotation>
          <xsd:documentation>This role is given to all subjects including guest (not logged in).</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="authenticated">
        <xsd:annotation>
          <xsd:documentation>This role is given to all remembered or authenticated users.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="AppSessionStatus">
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="active"/>
      <xsd:enumeration value="inactive"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:complexType name="Role">
    <xsd:annotation>
      <xsd:documentation>Roles contain global permissions.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="commons:ResourceAware">
        <xsd:attribute name="name" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Name of role, e.g. "admin", "sysadmin", "manager", "sales", in lower_underscore format.

This corresponds directly to entries in ou=groups in LDAP.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="description" type="xsd:string"/>
        <xsd:attribute name="assignMode" type="security:AssignMode"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Role" type="security:Role">
    <xsd:annotation>
      <xsd:documentation>Roles contain global permissions.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="DomainRole">
    <xsd:annotation>
      <xsd:documentation>Can be assigned to a person (security subject) in relation to a domain instance, e.g. "manager" of "zibalabel" "shop".

manager : instance role.
zibalabel : instance.
shop : domain.
</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="commons:ResourceAware">
        <xsd:attribute name="name" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Name of instance role, e.g. "admin", "sysadmin", "manager", "sales", in lower_underscore format.

This corresponds directly to entries in ou=groups in LDAP.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="description" type="xsd:string"/>
        <xsd:attribute name="domain" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Domain where this role applies to.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="DomainRole" type="security:DomainRole">
    <xsd:annotation>
      <xsd:documentation>Can be assigned to a person (security subject) in relation to a domain instance, e.g. "manager" of "zibalabel" "shop".

manager : instance role.
zibalabel : instance.
shop : domain.
</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Domain">
    <xsd:complexContent>
      <xsd:extension base="commons:ResourceAware">
        <xsd:attribute name="name" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Name of the security domain (object class), e.g. "shop", "person", "product", in lower_underscore format.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="description" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Provides human-readable description.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Domain" type="security:Domain"/>
  <xsd:complexType name="Action">
    <xsd:annotation>
      <xsd:documentation>Secured action.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="commons:ResourceAware">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="domains" nillable="true" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>The list of domains this action applies to.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="name" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Name of action, e.g. "print", "edit", in lower_underscore format.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="global" type="xsd:boolean">
          <xsd:annotation>
            <xsd:documentation>Global actions apply to the whole application, in addition to domain instances (if specified).</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="description" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Provides human-readable purpose of the action.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Action" type="security:Action">
    <xsd:annotation>
      <xsd:documentation>Secured action.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="SecurityCatalog">
    <xsd:annotation>
      <xsd:documentation>Contains objects used to define security: roles, instance roles, domains, actions.</xsd:documentation>
    </xsd:annotation>
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element name="roles" type="security:Role"/>
      <xsd:element name="instanceRoles" type="security:DomainRole"/>
      <xsd:element name="domains" type="security:Domain"/>
      <xsd:element name="actions" type="security:Action"/>
      <xsd:element name="permissions" type="security:Permission"/>
      <xsd:element name="domainPermissions" type="security:DomainPermission"/>
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
    <xsd:attribute name="domainPermissions" type="xsd:string"/>
  </xsd:complexType>
  <xsd:element name="SecurityCatalog" type="security:SecurityCatalog">
    <xsd:annotation>
      <xsd:documentation>Contains objects used to define security: roles, instance roles, domains, actions.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Permission">
    <xsd:complexContent>
      <xsd:extension base="commons:ResourceAware">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="roles" nillable="true" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>The roles this permission apply to.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="domainPermission" nillable="true" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Name(s) of the domain, can be "*".</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="actionPermission" nillable="true" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Name(s) of the action, can be "*".</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="instancePermission" nillable="true" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Name(s) of the instance(s), can be "*".

To specify multiple parts, separate each with ":".
e.g.
domain=wink
action=add
instance=hendy:car:nana

means permit hendy to add wink for car to nana.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Permission" type="security:Permission"/>
  <xsd:complexType name="DomainPermission">
    <xsd:annotation>
      <xsd:documentation>Permission for arbitrary instance of a single domain.

To express "manager of shop X can edit shop X" :
domain: shop
instanceRole: manager
action: edit,delete

More complex use cases are not possible, and need a different and much more complex DSL, such as...

To express "moderator of shop X can edit+delete comment * to shop X"
domain: shop
instanceRole: moderator
action: edit,delete
targetDomain: comment
targetInstance: *

To express "wink_moderator of zibalabel can edit+delete wink * of product * for zibalabel"

To express "creator of comment X can edit+delete comment X for *":
instanceRole: creator
domain: comment
action: edit,delete

</xsd:documentation>
    </xsd:annotation>
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element name="domainRoles" nillable="true" type="xsd:string"/>
      <xsd:element name="actions" nillable="true" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation>Action permissions given to subjects having the specified domain roles of a particular domain.</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
    <xsd:attribute name="domain" type="xsd:string" use="required">
      <xsd:annotation>
        <xsd:documentation>A simple (non-composite) domain this permission refers to.

A composite domain example is "comment-shop" or "wink-product-person".
</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>
  <xsd:element name="DomainPermission" type="security:DomainPermission">
    <xsd:annotation>
      <xsd:documentation>Permission for arbitrary instance of a single domain.

To express "manager of shop X can edit shop X" :
domain: shop
instanceRole: manager
action: edit,delete

More complex use cases are not possible, and need a different and much more complex DSL, such as...

To express "moderator of shop X can edit+delete comment * to shop X"
domain: shop
instanceRole: moderator
action: edit,delete
targetDomain: comment
targetInstance: *

To express "wink_moderator of zibalabel can edit+delete wink * of product * for zibalabel"

To express "creator of comment X can edit+delete comment X for *":
instanceRole: creator
domain: comment
action: edit,delete

</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="AppSession">
    <xsd:annotation>
      <xsd:documentation>An OAuth app session.

id is used as the accessToken.

See: https://sites.google.com/a/bippo.co.id/dev/berbatik/oauth
</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="commons:Identifiable">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="ipAddresses" nillable="true" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>IPv4 Addresses used during the whole session.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ipv6Addresses" nillable="true" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>IPv6 Addresses used during the whole session.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="person" type="commons:PersonInfo"/>
          <xsd:element name="attributes" type="security:AppSessionAttributeEntry"/>
        </xsd:choice>
        <xsd:attribute name="creationTime" type="xsd:string"/>
        <xsd:attribute name="modificationTime" type="xsd:string"/>
        <xsd:attribute name="schemaVersion" type="xsd:long"/>
        <xsd:attribute name="status" type="security:AppSessionStatus"/>
        <xsd:attribute name="ipAddress" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>IPv4 Address during initial sign in.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="ipv6Address" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>IPv6 address during initial sign in.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="userAgent" type="xsd:string"/>
        <xsd:attribute name="userAgents" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>HTTP user agents used during the whole session.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="timeout" type="xsd:long">
          <xsd:annotation>
            <xsd:documentation>Sets the time in milliseconds that the session may remain idle before expiring.
<ul>
 <li>A negative value means the session will never expire.</li>
 <li>A non-negative value (0 or greater) means the session expiration will occur if idle for that
 length of time.</li>
</ul>
<p/>
<b>*Note:</b> if you are used to the {@code HttpSession}'s {@code getMaxInactiveInterval()} method, the scale on
this method is different: Shiro Sessions use millisecond values for timeout whereas
{@code HttpSession.getMaxInactiveInterval} uses seconds.  Always use millisecond values with Shiro sessions.
</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="accessTime" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Returns the last time the application received a request or method invocation from the user associated with this session.
Application calls to this method do not affect this access time.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="expiryTime" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Returns the time that the session will expire (if it remains idle).

If there is activity, expiryTime may be extended.

@see {@link getAccessTime()}</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="timeZone" type="xsd:string"/>
        <xsd:attribute name="locale" type="xsd:string"/>
        <xsd:attribute name="person" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="AppSession" type="security:AppSession">
    <xsd:annotation>
      <xsd:documentation>An OAuth app session.

id is used as the accessToken.

See: https://sites.google.com/a/bippo.co.id/dev/berbatik/oauth
</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="AppSessionAttributeEntry">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
    <xsd:attribute name="key" type="xsd:string"/>
    <xsd:attribute name="value" type="xsd:string"/>
  </xsd:complexType>
  <xsd:element name="AppSessionAttributeEntry" type="security:AppSessionAttributeEntry"/>
</xsd:schema>
