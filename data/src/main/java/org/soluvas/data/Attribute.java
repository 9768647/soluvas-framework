/**
 */
package org.soluvas.data;

import java.io.Serializable;

import javax.measure.unit.Unit;

import org.eclipse.emf.common.util.BasicEList;
import org.eclipse.emf.common.util.EList;
import org.soluvas.commons.Describable;
import org.soluvas.commons.Imageable;
import org.soluvas.commons.NameContainer;
import org.soluvas.commons.NsPrefixable;
import org.soluvas.commons.Positionable;
import org.soluvas.data.impl.AttributeImpl;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Attribute Type</b></em>'.
 * <!-- end-user-doc -->
 *
 * <!-- begin-model-doc -->
 * EXPERIMENTAL.
 * 
 * Two/three approaches:
 * 
 * 1. Mixin must be statically designed into Ecore EClass, e.g. BerbatikBags, which inherits from BerbatikMixin (inherits ClothingMixin = SizeMixin + ColorMixin), BatikMixin, and BagsMixin. The upside is all attributes/references merge into the EObject. Downside is we need to permutate all combinations into EClass.
 * Not sure yet how it goes with MongoDB, JSON, and XMI import/export. Not sure yet how it goes with VariedProduct, BundleProduct, SubscribedProduct, SharedProduct, etc.
 * 
 * 2. Mixin is dynamic. Each product object maintain a list of MixinTypes (which is by default specified when the product is created), and filled mixins are put in an EList. Mixins can be added and removed during runtime, without any build-time project rebuild or EMF regeneration.
 * So store owner, even staff, can define new mixin and manipulate existing products with ease. No Mall admin or schema changes required.
 * Store staff can browse available mixin types and just add any mixin they want.
 * Similar approach with Drupal taxonomy or JCR mixin. Magento is more restrictive because of its inflexible AttributeSet concept. Mixin is like AttributeSet but with cardinality 0..*.
 * Probably need better name than mixin though.
 * Seems to be most flexible, for Jackson we can have custom converter. My concern is MongoDB and XMI.
 * Not sure yet how it goes with MongoDB, JSON, and XMI import/export. Not sure yet how it goes with VariedProduct, BundleProduct, SubscribedProduct, SharedProduct, etc.
 * 
 * 3. Hybrid #1. Mixin is by default static, which hopefully covers 80% use case.
 * When you want dynamic, you can add more mixins.
 * But ain't this too complicated?
 * On the web client side, it's also more work. Not to mention inventory, etc. integration with other systems.
 * ProductInfo & principal etc. also use the fully dynamic approach.
 * 
 * 4. Hybrid #2. Mixin is by default dynamic, which covers 80% of the customization.
 * And for things like category, tag, color, size, they're static, with code support. i.e. must be generated by EMF.
 * 
 * <!-- end-model-doc -->
 *
 * <p>
 * The following features are supported:
 * <ul>
 *   <li>{@link org.soluvas.data.Attribute#getDisplayName <em>Display Name</em>}</li>
 *   <li>{@link org.soluvas.data.Attribute#isEnabled <em>Enabled</em>}</li>
 *   <li>{@link org.soluvas.data.Attribute#getMinValues <em>Min Values</em>}</li>
 *   <li>{@link org.soluvas.data.Attribute#getMaxValues <em>Max Values</em>}</li>
 *   <li>{@link org.soluvas.data.Attribute#getDataTypeName <em>Data Type Name</em>}</li>
 *   <li>{@link org.soluvas.data.Attribute#getKindNsPrefix <em>Kind Ns Prefix</em>}</li>
 *   <li>{@link org.soluvas.data.Attribute#getKindName <em>Kind Name</em>}</li>
 *   <li>{@link org.soluvas.data.Attribute#getInputMethod <em>Input Method</em>}</li>
 *   <li>{@link org.soluvas.data.Attribute#getInputUnitName <em>Input Unit Name</em>}</li>
 *   <li>{@link org.soluvas.data.Attribute#isVisibleInSimple <em>Visible In Simple</em>}</li>
 *   <li>{@link org.soluvas.data.Attribute#isSearchableInQuick <em>Searchable In Quick</em>}</li>
 *   <li>{@link org.soluvas.data.Attribute#getImageId <em>Image Id</em>}</li>
 *   <li>{@link org.soluvas.data.Attribute#getFieldWidth <em>Field Width</em>}</li>
 *   <li>{@link org.soluvas.data.Attribute#isPrincipal <em>Principal</em>}</li>
 *   <li>{@link org.soluvas.data.Attribute#getPrimaryUri <em>Primary Uri</em>}</li>
 *   <li>{@link org.soluvas.data.Attribute#getSameAsUris <em>Same As Uris</em>}</li>
 * </ul>
 * </p>
 *
 * @see org.soluvas.data.DataPackage#getAttribute()
 * @model
 * @generated
 */
@JsonDeserialize(as=AttributeImpl.class)
public interface Attribute extends NsPrefixable, NameContainer, Imageable, Describable, Positionable, Serializable {
	/**
	 * Returns the value of the '<em><b>Display Name</b></em>' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * Human friendly name.
	 * <!-- end-model-doc -->
	 * @return the value of the '<em>Display Name</em>' attribute.
	 * @see #setDisplayName(String)
	 * @see org.soluvas.data.DataPackage#getAttribute_DisplayName()
	 * @model
	 * @generated
	 */
	String getDisplayName();

	/**
	 * Sets the value of the '{@link org.soluvas.data.Attribute#getDisplayName <em>Display Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Display Name</em>' attribute.
	 * @see #getDisplayName()
	 * @generated
	 */
	void setDisplayName(String value);

	/**
	 * Returns the value of the '<em><b>Enabled</b></em>' attribute.
	 * The default value is <code>"true"</code>.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * If {@code false}, this attribute will not be editable in the Product Editor backend.
	 * <!-- end-model-doc -->
	 * @return the value of the '<em>Enabled</em>' attribute.
	 * @see #setEnabled(boolean)
	 * @see org.soluvas.data.DataPackage#getAttribute_Enabled()
	 * @model default="true"
	 * @generated
	 */
	boolean isEnabled();

	/**
	 * Sets the value of the '{@link org.soluvas.data.Attribute#isEnabled <em>Enabled</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Enabled</em>' attribute.
	 * @see #isEnabled()
	 * @generated
	 */
	void setEnabled(boolean value);

	/**
	 * Returns the value of the '<em><b>Min Values</b></em>' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * 0 means optional, 1 means required, and so on.
	 * <!-- end-model-doc -->
	 * @return the value of the '<em>Min Values</em>' attribute.
	 * @see #setMinValues(long)
	 * @see org.soluvas.data.DataPackage#getAttribute_MinValues()
	 * @model
	 * @generated
	 */
	long getMinValues();

	/**
	 * Sets the value of the '{@link org.soluvas.data.Attribute#getMinValues <em>Min Values</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Min Values</em>' attribute.
	 * @see #getMinValues()
	 * @generated
	 */
	void setMinValues(long value);

	/**
	 * Returns the value of the '<em><b>Max Values</b></em>' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * 1 means singular. -1 means no maximum number of values.
	 * <!-- end-model-doc -->
	 * @return the value of the '<em>Max Values</em>' attribute.
	 * @see #setMaxValues(long)
	 * @see org.soluvas.data.DataPackage#getAttribute_MaxValues()
	 * @model
	 * @generated
	 */
	long getMaxValues();

	/**
	 * Sets the value of the '{@link org.soluvas.data.Attribute#getMaxValues <em>Max Values</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Max Values</em>' attribute.
	 * @see #getMaxValues()
	 * @generated
	 */
	void setMaxValues(long value);

	/**
	 * Returns the value of the '<em><b>Data Type Name</b></em>' attribute.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Data Type Name</em>' attribute isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Data Type Name</em>' attribute.
	 * @see #setDataTypeName(String)
	 * @see org.soluvas.data.DataPackage#getAttribute_DataTypeName()
	 * @model
	 * @generated
	 */
	String getDataTypeName();

	/**
	 * Sets the value of the '{@link org.soluvas.data.Attribute#getDataTypeName <em>Data Type Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Data Type Name</em>' attribute.
	 * @see #getDataTypeName()
	 * @generated
	 */
	void setDataTypeName(String value);

	/**
	 * Returns the value of the '<em><b>Kind Ns Prefix</b></em>' attribute.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Kind Ns Prefix</em>' attribute isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Kind Ns Prefix</em>' attribute.
	 * @see #setKindNsPrefix(String)
	 * @see org.soluvas.data.DataPackage#getAttribute_KindNsPrefix()
	 * @model
	 * @generated
	 */
	String getKindNsPrefix();

	/**
	 * Sets the value of the '{@link org.soluvas.data.Attribute#getKindNsPrefix <em>Kind Ns Prefix</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Kind Ns Prefix</em>' attribute.
	 * @see #getKindNsPrefix()
	 * @generated
	 */
	void setKindNsPrefix(String value);

	/**
	 * Returns the value of the '<em><b>Kind Name</b></em>' attribute.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Kind Name</em>' attribute isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Kind Name</em>' attribute.
	 * @see #setKindName(String)
	 * @see org.soluvas.data.DataPackage#getAttribute_KindName()
	 * @model
	 * @generated
	 */
	String getKindName();

	/**
	 * Sets the value of the '{@link org.soluvas.data.Attribute#getKindName <em>Kind Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Kind Name</em>' attribute.
	 * @see #getKindName()
	 * @generated
	 */
	void setKindName(String value);

	/**
	 * Returns the value of the '<em><b>Input Method</b></em>' attribute.
	 * The literals are from the enumeration {@link org.soluvas.data.InputMethod}.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Input Method</em>' attribute isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Input Method</em>' attribute.
	 * @see org.soluvas.data.InputMethod
	 * @see #setInputMethod(InputMethod)
	 * @see org.soluvas.data.DataPackage#getAttribute_InputMethod()
	 * @model
	 * @generated
	 */
	InputMethod getInputMethod();

	/**
	 * Sets the value of the '{@link org.soluvas.data.Attribute#getInputMethod <em>Input Method</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Input Method</em>' attribute.
	 * @see org.soluvas.data.InputMethod
	 * @see #getInputMethod()
	 * @generated
	 */
	void setInputMethod(InputMethod value);

	/**
	 * Returns the value of the '<em><b>Input Unit Name</b></em>' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * This is a String to make it easy to edit using Eclipse Generic XMI editor.
	 * <!-- end-model-doc -->
	 * @return the value of the '<em>Input Unit Name</em>' attribute.
	 * @see #setInputUnitName(String)
	 * @see org.soluvas.data.DataPackage#getAttribute_InputUnitName()
	 * @model
	 * @generated
	 */
	String getInputUnitName();

	/**
	 * Sets the value of the '{@link org.soluvas.data.Attribute#getInputUnitName <em>Input Unit Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Input Unit Name</em>' attribute.
	 * @see #getInputUnitName()
	 * @generated
	 */
	void setInputUnitName(String value);

	/**
	 * Returns the value of the '<em><b>Visible In Simple</b></em>' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * Whether this attribute is visible in simple entity listing (e.g. 'ls' shell command).
	 * <!-- end-model-doc -->
	 * @return the value of the '<em>Visible In Simple</em>' attribute.
	 * @see #setVisibleInSimple(boolean)
	 * @see org.soluvas.data.DataPackage#getAttribute_VisibleInSimple()
	 * @model
	 * @generated
	 */
	boolean isVisibleInSimple();

	/**
	 * Sets the value of the '{@link org.soluvas.data.Attribute#isVisibleInSimple <em>Visible In Simple</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Visible In Simple</em>' attribute.
	 * @see #isVisibleInSimple()
	 * @generated
	 */
	void setVisibleInSimple(boolean value);

	/**
	 * Returns the value of the '<em><b>Searchable In Quick</b></em>' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * Whether this attribute is included in quick searches (e.g. 'search' shell command.)
	 * 
	 * Note: If the repository is not code-generated, the search behavior depends on Repository.search() implementation.
	 * However, it is used for generation of 'search' shell command and soon, search UI.
	 * <!-- end-model-doc -->
	 * @return the value of the '<em>Searchable In Quick</em>' attribute.
	 * @see #setSearchableInQuick(boolean)
	 * @see org.soluvas.data.DataPackage#getAttribute_SearchableInQuick()
	 * @model
	 * @generated
	 */
	boolean isSearchableInQuick();

	/**
	 * Sets the value of the '{@link org.soluvas.data.Attribute#isSearchableInQuick <em>Searchable In Quick</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Searchable In Quick</em>' attribute.
	 * @see #isSearchableInQuick()
	 * @generated
	 */
	void setSearchableInQuick(boolean value);

	/**
	 * Returns the value of the '<em><b>Image Id</b></em>' attribute.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Image Id</em>' attribute isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Image Id</em>' attribute.
	 * @see #setImageId(String)
	 * @see org.soluvas.data.DataPackage#getAttribute_ImageId()
	 * @model
	 * @generated
	 */
	@Override
	String getImageId();

	/**
	 * Sets the value of the '{@link org.soluvas.data.Attribute#getImageId <em>Image Id</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Image Id</em>' attribute.
	 * @see #getImageId()
	 * @generated
	 */
	void setImageId(String value);

	/**
	 * Returns the value of the '<em><b>Field Width</b></em>' attribute.
	 * The default value is <code>"20"</code>.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * Field width, in characters. Used by text-based UI like Shell.
	 * <!-- end-model-doc -->
	 * @return the value of the '<em>Field Width</em>' attribute.
	 * @see #setFieldWidth(int)
	 * @see org.soluvas.data.DataPackage#getAttribute_FieldWidth()
	 * @model default="20"
	 * @generated
	 */
	int getFieldWidth();

	/**
	 * Sets the value of the '{@link org.soluvas.data.Attribute#getFieldWidth <em>Field Width</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Field Width</em>' attribute.
	 * @see #getFieldWidth()
	 * @generated
	 */
	void setFieldWidth(int value);

	/**
	 * Returns the value of the '<em><b>Principal</b></em>' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * If true, this attribute will be used as principal in VariedProduct (has no effect in SimpleProduct).
	 * 
	 * A VariedProduct may also override the principals in use for that specific product (this mechanism is not yet defined).
	 * <!-- end-model-doc -->
	 * @return the value of the '<em>Principal</em>' attribute.
	 * @see #setPrincipal(boolean)
	 * @see org.soluvas.data.DataPackage#getAttribute_Principal()
	 * @model
	 * @generated
	 */
	boolean isPrincipal();

	/**
	 * Sets the value of the '{@link org.soluvas.data.Attribute#isPrincipal <em>Principal</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Principal</em>' attribute.
	 * @see #isPrincipal()
	 * @generated
	 */
	void setPrincipal(boolean value);

	/**
	 * Returns the value of the '<em><b>Primary Uri</b></em>' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * Primary Linked Data URI for <a href="http://www.w3.org/2002/07/owl#ObjectProperty">owl:ObjectProperty</a>, to be usable as {@code additionalProperty}, e.g. {@code http://purl.org/opdm/garment#liningFabric}.
	 * <!-- end-model-doc -->
	 * @return the value of the '<em>Primary Uri</em>' attribute.
	 * @see #setPrimaryUri(String)
	 * @see org.soluvas.data.DataPackage#getAttribute_PrimaryUri()
	 * @model
	 * @generated
	 */
	String getPrimaryUri();

	/**
	 * Sets the value of the '{@link org.soluvas.data.Attribute#getPrimaryUri <em>Primary Uri</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Primary Uri</em>' attribute.
	 * @see #getPrimaryUri()
	 * @generated
	 */
	void setPrimaryUri(String value);

	/**
	 * Returns the value of the '<em><b>Same As Uris</b></em>' attribute list.
	 * The list contents are of type {@link java.lang.String}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * Additional <a href="http://schema.org/sameAs">sameAs</a> Linked Data URIs for <a href="http://www.w3.org/2002/07/owl#ObjectProperty">owl:ObjectProperty</a>, to be usable for inference or other purposes,
	 * e.g. http://purl.org/opdm/garment#liningFabric.
	 * <!-- end-model-doc -->
	 * @return the value of the '<em>Same As Uris</em>' attribute list.
	 * @see org.soluvas.data.DataPackage#getAttribute_SameAsUris()
	 * @model
	 * @generated
	 */
	@JsonDeserialize(as=BasicEList.class)
	EList<String> getSameAsUris();

	/**
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Input Unit</em>' attribute isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * Returns the Unit object based on {@link #inputUnitName}.
	 * <!-- end-model-doc -->
	 * @model kind="operation" dataType="org.soluvas.commons.Unit<?>"
	 * @generated
	 */
	Unit<?> getInputUnit();

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * Convert the string value to a mixin instance.
	 * <!-- end-model-doc -->
	 * @model
	 * @generated
	 */
	Value<?> valueOf(String stringValue);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model
	 * @generated
	 */
	Value<?> create();

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * True if minValues > 0.
	 * <!-- end-model-doc -->
	 * @model kind="operation"
	 * @generated
	 */
	@JsonIgnore
	boolean isRequired();

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * true if maxValues is > 1.
	 * <!-- end-model-doc -->
	 * @model kind="operation"
	 * @generated
	 */
	@JsonIgnore
	boolean isMultiple();

	String getUName();
} // AttributeType
